package com.example.simplegolf;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.RadioGroup;

import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.simplegolf.model.Course;
import com.example.simplegolf.model.Player;
import com.example.simplegolf.model.Repository;
import com.example.simplegolf.model.Scorecard;
import com.example.simplegolf.model.Tee;
import com.example.simplegolf.ui.playerselect.AddPlayerDialog;
import com.example.simplegolf.ui.playerselect.PlayerListAdapter;
import com.example.simplegolf.ui.playerselect.PlayerSelectListener;
import com.example.simplegolf.ui.playerselect.PlayerSelectViewModel;
import com.google.android.material.dialog.MaterialAlertDialogBuilder;

public class PlayerSelectActivity extends AppCompatActivity implements AddPlayerDialog.PlayerDialogListener, PlayerSelectListener {

    private PlayerSelectViewModel viewModel;
    private RecyclerView recyclerView;
    private PlayerListAdapter adapter;
    private RecyclerView.LayoutManager layoutManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_select_player);
        viewModel = new ViewModelProvider(this).get(PlayerSelectViewModel.class);
        viewModel.subscribeAsListener(this);

        if (getIntent().hasExtra("course")) {
            Course course = (Course) getIntent().getSerializableExtra("course");
            viewModel.setCourse(course);
        }
        buildRecyclerView();

        this.setTitle(R.string.add_player);
    }

    private void buildRecyclerView() {
        recyclerView = findViewById(R.id.player_recycler);
        recyclerView.setHasFixedSize(true);
        layoutManager = new LinearLayoutManager(this);
        adapter = new PlayerListAdapter(viewModel, this);

        recyclerView.setLayoutManager(layoutManager);
        recyclerView.setAdapter(adapter);
    }

    public void showDialog(View view) {
        AddPlayerDialog addPlayerDialog = new AddPlayerDialog();
        addPlayerDialog.show(getSupportFragmentManager(), "game activity dialog");

    }

    public void onClickCreateScorecard(View view) {
        if (viewModel.getPlayers().isEmpty()) {
            createNoPlayersDialog();
            return;
        }
        Scorecard scorecard = viewModel.buildScorecard();

        // Save to DB and fetch to get correct ID, allows course to be updated/saved in the future.
        new Thread(() -> {
            Repository repository = Repository.getRepository(this);
            final RadioGroup group = (RadioGroup) findViewById(R.id.holes_selector);

            int id = group.getCheckedRadioButtonId();
            switch (id) {
                case R.id.first9:
                    scorecard.setStartHole(0);
                    scorecard.setEndHole(8);
                    break;
                case R.id.last9:
                    scorecard.setStartHole(9);
                    scorecard.setEndHole(17);
                    break;
                case R.id.holes_18:
                    scorecard.setStartHole(0);
                    scorecard.setEndHole(17);
                    break;
            }

            long scoreCardId = repository.getDb().scorecardDAO().insert(scorecard); // Save to DB
            Scorecard savedScorecard = repository.getDb().scorecardDAO().getById(scoreCardId); // Fetch from DB to include the new autogenerated ID.

            runOnUiThread(() -> { // Start activity after DB operations are done.
                Intent startGame = new Intent(getApplicationContext(), GameActivity.class);
                startGame.putExtra("scorecard", savedScorecard);
                finish();
                startActivity(startGame);
            });
        }).start();
    }

    @Override
    public void newPlayerInfo(String name, String abbr, double hcp, Tee tee) {
        Course course = viewModel.getCourse();

        viewModel.addPlayer(new Player(name, abbr, course, tee, hcp));

        adapter.notifyDataSetChanged();
    }

    @Override
    public void editPlayerInfo(Player player, String name, String abbr, double hcp, Tee tee) {
        Course course = viewModel.getCourse();

        viewModel.editPlayer(player, name, abbr, course, tee, hcp);

        adapter.notifyDataSetChanged();
    }

    private void createNoPlayersDialog() {
        MaterialAlertDialogBuilder dialogBuilder = new MaterialAlertDialogBuilder(this);
        dialogBuilder.setTitle(R.string.add_players_title);
        dialogBuilder.setMessage(R.string.add_players);
        dialogBuilder.setNegativeButton(R.string.cancel, (dialog, which) -> {
        });
        dialogBuilder.show();
    }

    @Override
    public void playersChanged() {
        Button addPlayerButton = findViewById(R.id.add_player_btn);
        if (viewModel.getPlayers().size() >= 4) {
            addPlayerButton.setVisibility(View.GONE);
        } else {
            addPlayerButton.setVisibility(View.VISIBLE);
        }
    }
}
